pipeline {
    agent { label 'sha-ubuntu-node' }

    environment {
        VAULT_ADDR = 'http://34.228.140.38:8400/'
    }

    triggers {
        pollSCM('H/5 * * * *') // Poll every 5 minutes (use webhook instead in real setup)
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Fetch Secret from Vault') {
            steps {
                script {
                    withVault([vaultSecrets: [
                        [path: 'secret/app_secret', secretValues: [[envVar: 'APP1', vaultKey: 'app1']
                        ]]
                    ]]) {
                    //     sh '''
                    // echo "Setting up Python environment..."
                    // python3 -m venv venv
                    // source venv/bin/activate
                    // pip install --upgrade pip
                    // pip install flask
                    
                    // echo "Using secret in Python app"
                    // export API_KEY=$APP1
                    // python3 python_app/app.py
                    //     '''
                    sh '''
                    docker build -t flask-vault-app .
                    docker run -d -p 8005:5000 -e API_KEY=$APP1 flask-vault-app
                    '''
                    }
                }
            }
        }
        
        stage('GitLeaks Scan') {
            steps {
                sh '''#!/bin/bash
                    set -euxo pipefail

                    # Define variables
                    GITLEAKS_VERSION="8.18.1"
                    GITLEAKS_BINARY="gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz"

                    # Install gitleaks if not present
                    if ! command -v gitleaks &> /dev/null; then
                        echo "Installing Gitleaks..."
                        wget -q https://github.com/zricethezav/gitleaks/releases/download/v${GITLEAKS_VERSION}/${GITLEAKS_BINARY}
                        tar -xzf ${GITLEAKS_BINARY}
                        chmod +x gitleaks
                        sudo mv gitleaks /usr/local/bin/
                    fi

                    # Run gitleaks detect
                    echo "Running Gitleaks scan..."
                    mkdir -p reports
                    set +e
                    gitleaks detect --source python_app --verbose --report-format json --report-path reports/gitleaks-report.json
                    scan_exit=$?
                    set -e

                    # Handle exit codes
                    if [ "$scan_exit" -eq 1 ]; then
                        echo "❌ Gitleaks found secrets. Check reports/gitleaks-report.json for details."
                        exit 1
                    elif [ "$scan_exit" -ne 0 ]; then
                        echo "⚠️ Gitleaks exited with unexpected code $scan_exit"
                        exit $scan_exit
                    else
                        echo "✅ No secrets detected by Gitleaks."
                    fi
                '''
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'reports/gitleaks-report.json', onlyIfSuccessful: false
        }
        success {
            echo '✅ Pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed due to Gitleaks findings or error.'
        }
    }
}
